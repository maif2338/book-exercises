days_to_break <- difftime(spring_break, today)
print(days_to_break)
#step 5
change_year <- function(date, year){
date_as_string <- substr(as.character(date), 5, 10)
new_time <- paste(year, date_as_string, sep = "")
return(as.Date(new_time))
}
#step 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
#step 7
date_has_passed <- function(date){
return(Sys.Date()- as.Date(date)> 0)
}
#step 8
print(date_has_passed(as.Date("2020-01-23")))
#step 9
birthdays <- list(Fanny = as.Date("1999-01-09"), Mian = as.Date("1967-08-12"), Hui = as.Date("1968-10-31"))
print(birthdays)
#step 10
get_next_birthday <- function(date){
upcoming_birthday <- change_year(date, 2020)
if(date_has_passed(upcoming_birthday)){
upcoming_birthday <- change_year(upcoming_birthday, 2021)
}
return(upcoming_birthday)
}
#step 11
get_next_birthday(birthdays$Fanny)
#step 11
get_next_birthday(birthdays$Fanny)
#step 12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
#################
#### PART 1 #####
#################
#install
#install.packages("stringr")
#library("stringr")
#step 1
my_age <- 21
#step 2
my_name <- "fanny"
#step 3
make_introduction <- function(name, age){
return <- paste("Hello, my name is" ,name, "and I'm ",age, "years old")
}
#step 4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#step 5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
#step 6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#step 7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#step 1
books <- c("hunger games", "batman","new moon", "me before you", "after", "twilight")
print(books)
#step 2
top_three_books <- books[1:3]
print(top_three_books)
#step 3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#step 4
remove_book <- function(titles, index){
return(titles[-index])
}
#step 5
books_without_five <- remove_book(books, 5)
print(books_without_five)
#step 6
long_titles <- books[nchar(books)>15]
print(long_titles)
#################
#### PART 3 #####
#################
#step 1
numbers <- c(1:201)
#step 2
squared_numbers <- (numbers * numbers)
#step 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#step 4
squared_median <-median(squared_numbers)
print(squared_median)
#step 5
perfect_squares <- numbers[sqrt(numbers)== round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
#step 1
spring_break <- as.Date("2020-03-21")
#step 2
class(spring_break)
#step 3
today <- Sys.Date()
print(today)
#step 4
days_to_break <- difftime(spring_break, today)
print(days_to_break)
#step 5
change_year <- function(date, year){
date_as_string <- substr(as.character(date), 5, 10)
new_time <- paste(year, date_as_string, sep = "")
return(as.Date(new_time))
}
#step 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
#step 7
date_has_passed <- function(date){
return(Sys.Date()- as.Date(date)> 0)
}
#step 8
print(date_has_passed(as.Date("2020-01-23")))
#step 9
birthdays <- list(Fanny = as.Date("1999-01-09"), Mian = as.Date("1967-08-12"), Hui = as.Date("1968-10-31"))
print(birthdays)
#step 10
get_next_birthday <- function(date){
upcoming_birthday <- change_year(date, 2020)
if(date_has_passed(upcoming_birthday)){
upcoming_birthday <- change_year(upcoming_birthday, 2021)
}
return(upcoming_birthday)
}
#step 11
get_next_birthday(birthdays$Fanny)
#step 12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
#################
#### PART 1 #####
#################
#install
#install.packages("stringr")
#library("stringr")
#step 1
my_age <- 21
#step 2
my_name <- "fanny"
#step 3
make_introduction <- function(name, age){
return <- paste("Hello, my name is" ,name, "and I'm ",age, "years old")
}
#step 4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#step 5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
#step 6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#step 7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#step 1
books <- c("hunger games", "batman","new moon", "me before you", "after", "twilight")
print(books)
#step 2
top_three_books <- books[1:3]
print(top_three_books)
#step 3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#step 4
remove_book <- function(titles, index){
return(titles[-index])
}
#step 5
books_without_five <- remove_book(books, 5)
print(books_without_five)
#step 6
long_titles <- books[nchar(books)>15]
print(long_titles)
#################
#### PART 3 #####
#################
#step 1
numbers <- c(1:201)
#step 2
squared_numbers <- (numbers * numbers)
#step 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#step 4
squared_median <-median(squared_numbers)
print(squared_median)
#step 5
perfect_squares <- numbers[sqrt(numbers)== round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
#step 1
spring_break <- as.Date("2020-03-21")
#step 2
class(spring_break)
#step 3
today <- Sys.Date()
print(today)
#step 4
days_to_break <- difftime(spring_break, today)
print(days_to_break)
#step 5
change_year <- function(date, year){
date_as_string <- substr(as.character(date), 5, 10)
new_time <- paste(year, date_as_string, sep = "")
return(as.Date(new_time))
}
#step 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
#step 7
date_has_passed <- function(date){
return(Sys.Date()- as.Date(date)> 0)
}
#step 8
print(date_has_passed(as.Date("2020-01-23")))
#step 9
birthdays <- list(Fanny = as.Date("1999-01-09"), Mian = as.Date("1967-08-12"), Hui = as.Date("1968-10-31"))
print(birthdays)
#step 10
get_next_birthday <- function(date){
upcoming_birthday <- change_year(date, 2020)
if(date_has_passed(upcoming_birthday)){
upcoming_birthday <- change_year(upcoming_birthday, 2021)
}
return(upcoming_birthday)
}
#step 11
get_next_birthday(birthdays$Fanny)
#step 12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
#################
#### PART 1 #####
#################
#install
#install.packages("stringr")
#library("stringr")
#step 1
my_age <- 21
#step 2
my_name <- "fanny"
#step 3
make_introduction <- function(name, age){
return <- paste("Hello, my name is" ,name, "and I'm ",age, "years old")
}
#step 4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#step 5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
#step 6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#step 7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#step 1
books <- c("hunger games", "batman","new moon", "me before you", "after", "twilight")
print(books)
#step 2
top_three_books <- books[1:3]
print(top_three_books)
#step 3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#step 4
remove_book <- function(titles, index){
return(titles[-index])
}
#step 5
books_without_five <- remove_book(books, 5)
print(books_without_five)
#step 6
long_titles <- books[nchar(books)>15]
print(long_titles)
#################
#### PART 3 #####
#################
#step 1
numbers <- c(1:201)
#step 2
squared_numbers <- (numbers * numbers)
#step 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#step 4
squared_median <-median(squared_numbers)
print(squared_median)
#step 5
perfect_squares <- numbers[sqrt(numbers)== round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
#step 1
spring_break <- as.Date("2020-03-21")
#step 2
class(spring_break)
#step 3
today <- Sys.Date()
print(today)
#step 4
days_to_break <- difftime(spring_break, today)
print(days_to_break)
#step 5
change_year <- function(date, year){
date_as_string <- substr(as.character(date), 5, 10)
new_time <- paste(year, date_as_string, sep = "")
return(as.Date(new_time))
}
#step 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
#step 7
date_has_passed <- function(date){
return(Sys.Date()- as.Date(date)> 0)
}
#step 8
print(date_has_passed(as.Date("2020-01-23")))
#step 9
birthdays <- list(Fanny = as.Date("1999-01-09"), Mian = as.Date("1967-08-12"), Hui = as.Date("1968-10-31"))
print(birthdays)
#step 10
get_next_birthday <- function(date){
upcoming_birthday <- change_year(date, 2020)
if(date_has_passed(upcoming_birthday)){
upcoming_birthday <- change_year(upcoming_birthday, 2021)
}
return(upcoming_birthday)
}
#step 11
get_next_birthday(birthdays$Fanny)
#step 12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# A vector of height
height <- c(64, 74, 69, 69, 71)
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
salaries <- data.fran(employees, salaries_2017, adjustments)
salaries <- data.frame(employees, salaries_2017, adjustments)
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
salaries <- data.frame(employees, salaries_2017, adjustments)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
salaries_2017 <- runif(100, 40000, 50000)
View()
nrow(salaries[salaries$got_raise == TRUE, ])
was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$got_raise == FALSE,]
salaries[salaries$got_raise == FALSE,]
mean(paycut$adjustments)
paycut <- salaries[salaries$got_raise == FALSE,]
mean(paycut$adjustments)
mean(paycut$adjustments)
mean(salaries[salaries$got_raise == FALSE, ]$adjustments)
gwd
gwd()
getwd()
math_grades_ <- c(rnorm(n, mean = 3.6, sd = .4 ))
math_grades_ <- c(rnorm(8, mean = 3.6, sd = .4 ))
print(math_grades_)
spanish_grades <- c(rnorm(8, 3.8, .25))
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
spanish_grades <- c(rnorm(8, 3.8, .25))
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom", "Coco Li", "George Zhang", "Saurav Sawansukha ", "YuYu Madigan ")
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
source('~/Desktop/a3-using-data-maif2338/assignment.R')
#################
#### PART 1 #####
#################
# Your script for Part 1 goes here (and delete this comment!)
# step 1
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom", "Coco Li", "George Zhang", "Saurav Sawansukha ", "YuYu Madigan ")
# step 2
math_grades <- c(rnorm(8, mean = 3.6, sd = .4 ))
#step 3
spanish_grades <- c(rnorm(8, 3.8, .25))
# step 4
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
#################
#### PART 2 #####
#################
# Your script for Part 2 goes here (and delete this comment!)
#################
#### PART 3 #####
#################
# Your script for Part 3 goes here (and delete this comment!)
print(ta_grades)
table_description <- data.frame(
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom", "Coco Li", "George Zhang", "Saurav Sawansukha ", "YuYu Madigan "),
math_grades <- c(rnorm(8, mean = 3.6, sd = .4 )),
spanish_grades <- c(rnorm(8, 3.8, .25))
)
print(table_description)
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-4")
read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
View(grants)
View()
grants[grants$total_amount == max(grants$total_amount), "organization"]
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
grants[grants$total_amount == max(grants$total_amount), "organization"]
mean(grants$total_amount)
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
grants[grants$total_amount == min(grants$total_amount), "organization", "total_amount"]
grants[grants$total_amount == min(grants$total_amount), c("organization", "total_amount")]
olnames_string <- paste(tas, math_grades, spanish_grades, collapse = ", ")
COL_NAMES<- list("ta_name", "math_grade", "spanish_grade")
print(table_description)
print(table_description)
colnames_string <- paste(tas, math_grades, spanish_grades, collapse = ", ")
table_description <- paste("The grade data frame has", nrow(ta_grades),"rows and", ncol(ta_grades),"cols:", colnames_string )
print(table_description)
print(table_description)
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# step 5
colnames_string <- paste(tas, math_grades, spanish_grades, collapse = ", ")
table_description <- paste("The grade data frame has", nrow(ta_grades),"rows and", ncol(ta_grades),"cols:", colnames_string )
print(table_description)
# step 6
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# step 5
colnames_string <- paste(tas, math_grades, spanish_grades, collapse = ", ")
table_description <- paste("The grade data frame has", nrow(ta_grades),"rows and", ncol(ta_grades),"cols:", colnames_string )
print(table_description)
# step 6
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# step 5
colnames_string <- paste(tas, math_grades, spanish_grades, collapse = ", ")
table_description <- paste("The grade data frame has", nrow(ta_grades),"rows and", ncol(ta_grades),"cols:", colnames_string )
print(table_description)
# step 6
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
source('~/Desktop/a3-using-data-maif2338/assignment.R')
print(colnames(ta_grades))
ta_grades$better_at_math <- ta_grades$math_grades > ta_grades$spanish_grades
ta_grades$better_at_math <- t(a_grades$math_grades > ta_grades$spanish_grades)
ta_grades$better_at_math <- (ta_grades$math_grades > ta_grades$spanish_grades)
# step 7
ta_grades$better_at_math <- ta_grades$math_grades > ta_grades$spanish_grades
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
# step 6
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
# step 7
ta_grades$better_at_math <- ta_grades$math_grades > ta_grades$spanish_grades
#################
print(better_at_math)
# step 5
colnames_string <- paste(tas, math_grades, spanish_grades, collapse = ", ")
table_description <- paste("The grade data frame has", nrow(ta_grades),"rows and", ncol(ta_grades),"cols:", colnames_string )
print(table_description)
# step 6
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
# step 7
ta_grades$better_at_math <- ta_grades$math_grades > ta_grades$spanish_grades
print(better_at_math)
print(ta_grades$better_at_math )
print(ta_grades["Gavin Sreesangkom" , ])
ta_grades[ta_grades$ta == "Gavin Sreesangkom" , ]
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
# step 7
ta_grades$better_at_math <- ta_grades$math_grades > ta_grades$spanish_grades
# step 8
ta_grades[ta_grades$ta == "Gavin Sreesangkom" , ]
# step 9
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, ])
